[
 SymForm PDF Driver        - CTR.CONDUCTOR.FORM
 Auto generated variables  - CTR.CONDUCTOR.FORM.DEF
 Auto generated procedures - CTR.CONDUCTOR.FORM.PRO
 PDF Form filename         - CTR.CONDUCTOR.FORM.pdf

 Author:   FSCU\ethan.roberts 
 Version:  SymPDFCreator 4.1.1.1


 Created by
 Ethan Roberts
 on 03/16/2019


]
SUBROUTINE DEMAND WINDOWS

TARGET = ACCOUNT

DEFINE
 #INCLUDE "RD.WINDOWS.DEF"
 #INCLUDE "RD.GETDATA.DEF"
 #INCLUDE "SYMPDF.DEF"
 #INCLUDE "CTR.CONDUCTOR.FORM.DEF"
 #INCLUDE "RD.SHARE.DEF"
 #INCLUDE "RD.LOAN.DEF"
 #INCLUDE "FSCUPROCS.DEF"

 ACCTAMOUNT = MONEY


END


SETUP

 ACCTAMOUNT = $0.00
 I = 0
 ARYSIZE = 19
                              [ PRINT OPTIONS            ]
 PRINTERNAME   = ""           [ PRINTER NAME (OPTIONAL)  ]

 PRINTCOPIES   = 1            [ 0 = ONE COPY (DEFAULT)   ]
                              [ 1 = ONE COPY             ]
                              [ n = n COPIES             ]

 PRINTMODE     = 0            [ 0 = FULL (DEFAULT)       ]
                              [ 1 = AUTOMATIC            ]
                              [ 2 = SILENT               ]

 PRINTANDTHEN  = 0            [ 0 = DO NOTHING (DEFAULT) ]
                              [ 1 = SUBMIT FORM          ]
                              [ 2 = CLOSE FORM           ]

 PRINTDUPLEX   = 0            [ 0 = DEFAULT (DEFAULT)    ]
                              [ 1 = SIMPLEX              ]
                              [ 2 = DUPLEX LONG EDGE     ]
                              [ 3 = DUPLEX SHORT EDGE    ]

 PRINTCONTENTS = 0            [ 0 = DOC (DEFAULT)        ]
                              [ 1 = DOC AND COMMENTS     ]
                              [ 2 = FORM FIELDS ONLY     ]

 FORMNAME = "CTR.CONDUCTOR.FORM"
 CALL FORMSETUP
 
 [ NOTE: if you don't want to load previous saved forms 
   set the following LOADSAVEDFORMS flag to FALSE ]
 LOADSAVEDFORMS = TRUE
 SAVEDESCRIPTION = FORMNAME

 FOR ACCOUNT ACCOUNT:NUMBER
  DO
   CALL DATASETUP
   CALL CUSTOMSETUP
  END

 CLOSEFORM = FALSE
 WHILELIMIT = 100000
 WHILE (CLOSEFORM = FALSE)
  DO
   CALL SHOWFORM
   CALL CLEARCHECKBOXES
   CALL GETRESPONSE

   IF (FORMMESSAGE = "SUBMIT") THEN
    DO
     CLOSEFORM = CLOSEAFTERSUBMIT
     IF (DOFORMFMP = TRUE) THEN
      DO
       CALL FORMFMP
       IF (FORMFMPERROR <> "") THEN
        DO
         POPUPMESSAGE(2, "CTR.CONDUCTOR.FORM FM ERROR: " + FORMFMPERROR)
         CLOSEFORM = FALSE
        END
      END
     CALL FINALIZEFORM
     IF (DOOPTICAL = TRUE AND OPTICALTYPE <> "") THEN
      DO
       CALL STOREOPTICAL
       IF (OPTICALERROR <> "") THEN
        DO
         POPUPMESSAGE(2,"CTR.CONDUCTOR.FORM OPTICAL ERROR: " + OPTICALERROR)
         CLOSEFORM = FALSE
        END
      END
    END
   FORMVERSION = FORMVERSION + 1
  END
END

PRINT TITLE = "PDF FORM " + FORMNAME
 SUPPRESSNEWLINE
END

[
 This procedure is to initialize custom variables defined on the
 PDF Form file. Any variables not recognized by the 'SymPDF Creator'
 will be declared as a custom CHARACTER variable with the field name.

 Examples:
   MYFIELD = "MYVALUE"
   MYFIELD = FORMAT("99/99/9999",SYSTEMDATE)
]
PROCEDURE CUSTOMSETUP
 CALL CUSTOMJAVASCRIPT
 CALL EMAILSETUP
END

[
 This procedure is to override data pased in the CTR.CONDUCTOR.FORM.PRO,
 specifically in the WRITEFORMDATA Procedure. Commands here must
 be in the same format as in the WRITEFORMDATA Procedure.
 This is used for customization since most times you can
 (if possible) set the values in the CUSTOMSETUP procedure above.

 Examples:
   FIELDNAME = "MYFIELD" CHARACTERDATA = "Hello SymFormPDF" CALL WRITECHARACTER
   FIELDNAME = "MYFIELD" MONEYDATA = $3.14 CALL WRITEMONEY
]
PROCEDURE CUSTOMWRITEFORMDATA


END

[
 This procedure is to override data read back from the PDF in the
 CTR.CONDUCTOR.FORM.PRO, specifically in the READFORMDATA Procedure.
 Commands here can be used to do some special reading of variables
 most times this is not used.
]
PROCEDURE CUSTOMREADFORMDATA
 
 

 
END

[
 This procedure is to send special JavaScript code to the PDF from.
 The code specified here will be executed after the field data is
 loaded into the fields. You can declare object variables that are
 used in your form. For example, you could pass the entire Account
 tree to be used in your javascript functions.

 Example:
   JSTEXT = "app.alert('Hello SymFormPDF JavaScript!');" CALL WRITEJS
]
PROCEDURE CUSTOMJAVASCRIPT


[                                                                         ]
[ The code below is used for aggregating deposits and withdrawals within  ]
[ a day.  This portion is not being used, and the teller is calculating   ]
[ these totals on their own.                                              ] 
[
[                                                                         ]
  FOR EACH SHARE WITH SHARE:CLOSEDATE='--/--/--'
   DO
    FOR EACH SHARE TRANSACTION WITH SHARE TRANSACTION:POSTDATE = SYSTEMDATE AND
                                    (SHARE TRANSACTION:ACTIONCODE = "D" OR
                                     SHARE TRANSACTION:ACTIONCODE = "W")
     DO
      ACCTAMOUNT = ACCTAMOUNT + SHARE TRANSACTION:TRANAMOUNT
     END
     UNTIL SHARE TRANSACTION:POSTDATE < SYSTEMDATE
    END


    TRANAMOUNT = ACCTAMOUNT 
]





    CALL CLEARNAMEARY
    FOR EACH NAME WITH NAME:EXPIRATIONDATE = '--/--/--'
     DO
      CALL SCANNAMEARRAY
      IF FOUNDINARY = FALSE THEN
       CALL INSERTNAME
     END

    FOR EACH SHARE WITH SHARE:CLOSEDATE = '--/--/--'
     DO
      FOR EACH SHARE NAME WITH SHARE NAME:EXPIRATIONDATE = '--/--/--'
       DO
        CALL SCANSHARENAMEARRAY
        IF FOUNDINARY = FALSE THEN
         CALL INSERTSHARENAME
       END
     END
  
     I = 0


    JSTEXT = "this.getField('ANUMBER').readonly = true; "
    CALL WRITEJS
    JSTEXT = "this.getField('TRANAMOUNT').required = true; "
    CALL WRITEJS
    JSTEXT = "this.getField('SYSTEMDATE').readonly = true; "
    CALL WRITEJS
    JSTEXT = "this.getField('SYSUSERNAME').readonly = true; "
    CALL WRITEJS
    JSTEXT = "this.getField('SYSUSERNUMBER').readonly = true; "
    CALL WRITEJS



[ Making fields required based on if account is Business account or regular account ]


  IF (ACCOUNT:TYPE = 63 OR    [ if business account ]
     ACCOUNT:TYPE = 64) THEN
   DO
    JSTEXT = "app.alert('Please fill out Business Information section only.'); "
    CALL WRITEJS
    JSTEXT = "this.getField('BN').required = true; "
    CALL WRITEJS
    JSTEXT = "this.getField('EIN').required = true; "
    CALL WRITEJS
    JSTEXT = "this.getField('ToB').required = true; "
    CALL WRITEJS
    JSTEXT = "this.getField('JOB').required = true; "
    CALL WRITEJS

    JSTEXT = "this.getField('FN').required = true; "
    CALL WRITEJS
    JSTEXT = "this.getField('MI').required = true; "
    CALL WRITEJS
    JSTEXT = "this.getField('LN').required = true; "
    CALL WRITEJS
    JSTEXT = "this.getField('SSN').required = true; "
    CALL WRITEJS
    JSTEXT = "this.getField('DOB').required = true; "
    CALL WRITEJS
    JSTEXT = "this.getField('FID').required = true; "
    CALL WRITEJS
    JSTEXT = "this.getField('ISSUED').required = true; "
    CALL WRITEJS
    JSTEXT = "this.getField('PA').required = true; "
    CALL WRITEJS
    JSTEXT = "this.getField('CITY').required = true; "
    CALL WRITEJS
    JSTEXT = "this.getField('ST').required = true; "
    CALL WRITEJS
    JSTEXT = "this.getField('ZIPCODE').required = true; "
    CALL WRITEJS
   END
  ELSE
   DO
    JSTEXT = "app.alert('Please fill out Conductor Information section only.'); "
    CALL WRITEJS
    JSTEXT = "this.getField('FN').required = true; "
    CALL WRITEJS
    JSTEXT = "this.getField('MI').required = true; "
    CALL WRITEJS
    JSTEXT = "this.getField('LN').required = true; "
    CALL WRITEJS
    JSTEXT = "this.getField('JOB').required = true; "
    CALL WRITEJS
    JSTEXT = "this.getField('SSN').required = true; "
    CALL WRITEJS
    JSTEXT = "this.getField('DOB').required = true; "
    CALL WRITEJS
    JSTEXT = "this.getField('FID').required = true; "
    CALL WRITEJS
    JSTEXT = "this.getField('ISSUED').required = true; "
    CALL WRITEJS
    JSTEXT = "this.getField('PA').required = true; "
    CALL WRITEJS
    JSTEXT = "this.getField('CITY').required = true; "
    CALL WRITEJS
    JSTEXT = "this.getField('ST').required = true; "
    CALL WRITEJS
    JSTEXT = "this.getField('ZIPCODE').required = true; "
    CALL WRITEJS


    JSTEXT = "this.getField('BN').readonly = true; "
    CALL WRITEJS
    JSTEXT = "this.getField('EIN').readonly = true; "
    CALL WRITEJS
    JSTEXT = "this.getField('ToB').readonly = true; "
    CALL WRITEJS
   END



  [ create and begin object array ]

    JSTEXT = "aryName = "
    CALL WRITEJS
    JSTEXT = "[ "
    CALL WRITEJS
    JSTEXT =  "{ toString: function() {return 'Select One'}, "
    CALL WRITEJS
    JSTEXT = "      MI: '',  " 
    CALL WRITEJS  
    JSTEXT = "      LN: '',  " 
    CALL WRITEJS  
    JSTEXT = "      JOB: '',  " 
    CALL WRITEJS  
    JSTEXT = "      SSN: '',  " 
    CALL WRITEJS   
    JSTEXT = "      DOB: '',  " 
    CALL WRITEJS 
    JSTEXT = "      FID: '',  " 
    CALL WRITEJS 
    JSTEXT = "      ISSUED: '',  " 
    CALL WRITEJS 
    JSTEXT = "      PA: '',  " 
    CALL WRITEJS 
    JSTEXT = "      CITY: '',  " 
    CALL WRITEJS 
    JSTEXT = "      ST: '',  " 
    CALL WRITEJS 
    JSTEXT = "      ZIPCODE: '',  " 
    CALL WRITEJS 
    JSTEXT = "}, "
    CALL WRITEJS
 

    I = 0
    FOR EACH NAME WITH NAME:EXPIRATIONDATE = '--/--/--'
     DO
      FOR I = 0 TO ARYSIZE
       DO
        IF NAME:FIRST = NAMEARY(I) THEN
         DO
          JSTEXT =  "{ toString: function() {return '"+NAME:FIRST+"'}, "
          CALL WRITEJS
          JSTEXT = "      MI: '"+NAME:MIDDLE+"',  " 
          CALL WRITEJS  
          JSTEXT = "      LN: '"+NAME:LAST+"',  " 
          CALL WRITEJS  
          JSTEXT = "      JOB: '"+NAME:OCCUPATION+"',  " 
          CALL WRITEJS  
          JSTEXT = "      SSN: '"+NAME:SSN+"',  " 
          CALL WRITEJS   
          JSTEXT = "      DOB: '"+FORMAT("99/99/9999",NAME:BIRTHDATE)+"',  " 
          CALL WRITEJS 
          JSTEXT = "      FID: 'DL  "+NAME:IDENTIDNUMBER:1+"',  " 
          CALL WRITEJS 
          JSTEXT = "      ISSUED: '"+NAME:IDENTIDDESCRIPTION:1+"',  " 
          CALL WRITEJS 
          JSTEXT = "      PA: '"+NAME:STREET+"',  " 
          CALL WRITEJS 
          JSTEXT = "      CITY: '"+NAME:CITY+"',  " 
          CALL WRITEJS 
          JSTEXT = "      ST: '"+NAME:STATE+"',  " 
          CALL WRITEJS 
          JSTEXT = "      ZIPCODE: '"+SEGMENT(NAME:ZIPCODE,1,5)+"',  " 
          CALL WRITEJS 
          JSTEXT = "}, "
          CALL WRITEJS
          NAMEARY(I) = ""  [ this element has been used, set to null ]
         END
       END
     END
      
      
     FOR EACH SHARE WITH SHARE:CLOSEDATE = '--/--/--'
      DO
       FOR EACH SHARE NAME WITH SHARE NAME:EXPIRATIONDATE = '--/--/--'
        DO
         FOR I = 0 TO ARYSIZE
          DO
           IF SHARE NAME:FIRST = NAMEARY(I) THEN
            DO
             JSTEXT =  "{ toString: function() {return '"+SHARE NAME:FIRST+"'}, "
             CALL WRITEJS
             JSTEXT = "      MI: '"+SHARE NAME:MIDDLE+"',  " 
             CALL WRITEJS  
             JSTEXT = "      LN: '"+SHARE NAME:LAST+"',  " 
             CALL WRITEJS  
             JSTEXT = "      JOB: '"+SHARE NAME:OCCUPATION+"',  " 
             CALL WRITEJS  
             JSTEXT = "      SSN: '"+SHARE NAME:SSN+"',  " 
             CALL WRITEJS   
             JSTEXT = "      DOB: '"+FORMAT("99/99/9999",SHARE NAME:BIRTHDATE)+"',  " 
             CALL WRITEJS 
             JSTEXT = "      FID: 'DL  "+SHARE NAME:IDENTIDNUMBER:1+"',  " 
             CALL WRITEJS 
             JSTEXT = "      ISSUED: '"+SHARE NAME:IDENTIDDESCRIPTION:1+"',  " 
             CALL WRITEJS 
             JSTEXT = "      PA: '"+SHARE NAME:STREET+"',  " 
             CALL WRITEJS 
             JSTEXT = "      CITY: '"+SHARE NAME:CITY+"',  " 
             CALL WRITEJS 
             JSTEXT = "      ST: '"+SHARE NAME:STATE+"',  " 
             CALL WRITEJS 
             JSTEXT = "      ZIPCODE: '"+SEGMENT(SHARE NAME:ZIPCODE,1,5)+"',  " 
             CALL WRITEJS 
             JSTEXT = "}, "
             CALL WRITEJS
             NAMEARY(I) = ""  [ this element has been used, set to null ]
            END     
          END
        END
      END


      JSTEXT =  "{ toString: function() {return ' '}, "
      CALL WRITEJS
      JSTEXT = "      MI: '',  " 
      CALL WRITEJS  
      JSTEXT = "      LN: '',  " 
      CALL WRITEJS  
      JSTEXT = "      JOB: '',  " 
      CALL WRITEJS  
      JSTEXT = "      SSN: '',  " 
      CALL WRITEJS   
      JSTEXT = "      DOB: '',  " 
      CALL WRITEJS 
      JSTEXT = "      FID: '',  " 
      CALL WRITEJS 
      JSTEXT = "      ISSUED: '',  " 
      CALL WRITEJS 
      JSTEXT = "      PA: '',  " 
      CALL WRITEJS 
      JSTEXT = "      CITY: '',  " 
      CALL WRITEJS 
      JSTEXT = "      ST: '',  " 
      CALL WRITEJS 
      JSTEXT = "      ZIPCODE: '',  " 
      CALL WRITEJS 
      JSTEXT = "}, "
      CALL WRITEJS
      JSTEXT = " ]; "
      CALL WRITEJS

 [ end of object array ]








  JSTEXT = "var varName = "
  CALL WRITEJS
  JSTEXT = "  this.getField('FN'); "
  CALL WRITEJS

  JSTEXT = " varName.clearItems(); "
  CALL WRITEJS


  JSTEXT = " varName.setItems(aryName); "
  CALL WRITEJS


END

[
 This procedure is to enable email and set up email for the PDF form.
 If you set the EMAILFORMAT to HTML, you can use html markup in tne 
 email message body.

  EMAILENABLED    0 = FALSE
                  1 = TRUE
  EMAILFORMAT     0 = Plain Text
                  1 = HTML
  EMAILFROM       This is required if EMAILENABLED = TRUE
                  Example: "noreply@YourCU.com"

 Example:
   EMAILTEXT = "This is the email body message" CALL WRITEEMAIL
]
PROCEDURE EMAILSETUP
 EMAILENABLED = 0
 EMAILFORMAT = 0
 EMAILFROM = ""
 EMAILSUBJECT = ""
END



PROCEDURE CLEARNAMEARY
 I = 0

 FOR I = 0 TO ARYSIZE
  DO
   NAMEARY(I) = ""
  END

  I = 0

END



PROCEDURE SCANNAMEARRAY
 FOUNDINARY = FALSE
 I = 0 

 FOR I = 0 TO ARYSIZE
  DO
   IF NAMEARY(I) = NAME:FIRST THEN
     FOUNDINARY = TRUE
  END

  I = 0

END




PROCEDURE SCANSHARENAMEARRAY
 FOUNDINARY = FALSE
 I = 0 

 FOR I = 0 TO ARYSIZE
  DO
   IF NAMEARY(I) = SHARE NAME:FIRST THEN
     FOUNDINARY = TRUE
  END

  I = 0

END




PROCEDURE INSERTNAME

 INSERTED = FALSE
 I = 0

 WHILE (I <= ARYSIZE AND INSERTED = FALSE)
  DO
   IF NAMEARY(I) = "" THEN  [ found the next empty slot in array, insert ID ]
    DO
     NAMEARY(I) = NAME:FIRST
     INSERTED = TRUE
    END
  I = I + 1
  END

  I = 0

END






PROCEDURE INSERTSHARENAME

 INSERTED = FALSE
 I = 0

 WHILE (I <= ARYSIZE AND INSERTED = FALSE)
  DO
   IF NAMEARY(I) = "" THEN  [ found the next empty slot in array, insert ID ]
    DO
     NAMEARY(I) = SHARE NAME:FIRST
     INSERTED = TRUE
    END
  I = I + 1
  END

  I = 0

END



#INCLUDE "SYMPDF.PRO"
#INCLUDE "CTR.CONDUCTOR.FORM.PRO"
